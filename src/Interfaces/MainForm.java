/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Business.Invoice;
import Business.InvoiceRow;
import Business.PackingSlip;
import Business.Product;
import Business.Slip;
import static java.awt.SystemColor.info;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

/**
 *
 * @author apple
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    
    List<Product> products;
    List<Invoice> invoices;
    List<PackingSlip> packingSlips;
    
    public MainForm() {
        
        initComponents();
        
        ReadDataFromCSVFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnShow = new javax.swing.JButton();
        btnCSV = new javax.swing.JButton();
        btnShipItem = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnShow.setText("Show  All Information");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        btnCSV.setText("Packing Slips .csv File");
        btnCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCSVActionPerformed(evt);
            }
        });

        btnShipItem.setText("Ship Item");
        btnShipItem.setActionCommand("Ship ");
        btnShipItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShipItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnShow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCSV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnShipItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(101, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(btnShow)
                .addGap(32, 32, 32)
                .addComponent(btnCSV)
                .addGap(28, 28, 28)
                .addComponent(btnShipItem)
                .addContainerGap(119, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        // TODO add your handling code here:
        
        ShowAllInfo frmShowAllInfo=new ShowAllInfo();
        frmShowAllInfo.invoices=invoices;
        frmShowAllInfo.packingSlips=packingSlips;
        frmShowAllInfo.products=products;
        frmShowAllInfo.Initializetables();
        frmShowAllInfo.show();
    }//GEN-LAST:event_btnShowActionPerformed

    private void btnCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCSVActionPerformed
        // TODO add your handling code here:
        
        FileWriter writer;
        BufferedWriter out = null;
	
        try {
            writer = new FileWriter("output.csv");
            out = new BufferedWriter(writer);
            writer.append("Category");
	    writer.append(',');
	    writer.append("ID");
            writer.append(',');
            writer.append("ShipDate");
            writer.append(',');
	    writer.append("SalesPrice");
            writer.append(',');
	    writer.append("PackageSlipID");
            writer.append(',');
	    writer.append("Amount");
             writer.append('\n');
          //  out.write("Category"+','+"ID"+','+"ShipDate"+','+"SalesPrice"+','+"PackageSlipID"+','+"Amount");
           
            out.newLine();
            
            
             for (PackingSlip packageSlip :packingSlips) {
                 for(Slip slip : packageSlip.slips)
                 {
                    writer.append(slip.getCategory());
                    writer.append(',');
                    writer.append(String.valueOf(slip.getID()));
                    writer.append(',');
                    writer.append(String.valueOf(packageSlip.getShipingdate()));
                    writer.append(',');
                    writer.append(String.valueOf(slip.getSalesPrice()));
                    writer.append(',');
                    writer.append(String.valueOf(packageSlip.getID()));
                    writer.append(',');
                    writer.append(String.valueOf(slip.getAmount()));
                    writer.append('\n');
              /*      out.write(slip.getCategory()+','+String.valueOf(slip.getID())+','+
                    String.valueOf(packageSlip.getShipingdate())+','+
                    String.valueOf(slip.getSalesPrice())+','+
                    String.valueOf(packageSlip.getID())+','+String.valueOf(slip.getAmount()));*/
                            out.newLine();
                 }
             }
             out.flush();
             out.close();
          
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_btnCSVActionPerformed

    private void btnShipItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShipItemActionPerformed
        // TODO add your handling code here:
        ShipItem frmShipItem=new ShipItem();
        frmShipItem.invoices=invoices;
        frmShipItem.packageSlips=packingSlips;
        frmShipItem.products=products;
        frmShipItem.FillProductComboBox();
        frmShipItem.show();
    }//GEN-LAST:event_btnShipItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    
    public void ReadDataFromCSVFile()
    {
        products=new ArrayList<>();
        packingSlips=new ArrayList<>();
        invoices=new ArrayList<>();
        
        
        
        BufferedReader in=null;
        String thisLine=null;
        try{
            in=new BufferedReader(new FileReader("src/Input.csv"));
            in.readLine();
            
            while((thisLine=in.readLine())!=null){
                 
                AddInvoice(thisLine);
                AddProduct(thisLine);
                AddInvoiceRow(thisLine);
               
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
       

    }

    public  boolean FindInvoice(int ID)
    {
        boolean flag=false;
        for (Invoice invoice :invoices) {
            if(invoice.getID()==ID){
                flag=true;
            }
        }
        
        return flag;
    }
    
      public  boolean FindProduct(String Name)
    {
        boolean flag=false;
        for (Product product :products) {
            if(product.getName()==Name){
                flag=true;
            }
        }
        
        return flag;
    }
      
      public void AddInvoice(String Info)
      {
                Scanner scanner = new Scanner(Info);
                scanner.useDelimiter(",");
                int InvoiceID=scanner.nextInt();
                if (FindInvoice(InvoiceID)==false) {
                    Invoice invoice =new Invoice();
                    
                    
                    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
                    Date EntryDate=null;
               
                    try {
                       
                        EntryDate = formatter.parse(scanner.next());

                    }
                    catch(Exception e)
                            {
                                EntryDate=null;
                            }
                    
                    invoice.setID(InvoiceID);
                    invoice.setEntrydate(EntryDate);
                    invoice.setTotalAmount(0);
                    invoice.setTotalPrice(0);
                    invoices.add(invoice);
                
            }
      }
      
      public void AddProduct(String Info)
      {
                Scanner scanner = new Scanner(Info);
                scanner.useDelimiter(",");
                scanner.nextInt();
                scanner.next();
                String Category=scanner.next();
                if (FindProduct(Category)==false) {
                    
                    Product product=new Product();
                    
                    product.setAmount(0);
                    product.setID(products.size()+1);
                    product.setName(Category);
                    scanner.next();
                    try{
                    product.setPrice(Double.parseDouble(scanner.next()) );
                    }
                    catch(Exception e)
                    {
                        
                    }
                    products.add(product);
            }
      }
      
    public void AddInvoiceRow(String Info)
    {
         Scanner scanner = new Scanner(Info);
         scanner.useDelimiter(",");
         int InvoiceID=scanner.nextInt();
         InvoiceRow invoiceRow=new InvoiceRow();
         scanner.next();
         String Category=scanner.next();
         invoiceRow.setAmount(scanner.nextInt());
         try{
         invoiceRow.setFirstPrice(Double.parseDouble(scanner.next()));}
         catch(Exception e)
         {
             
         }
         invoiceRow.setCategory(Category);
         
         for (Invoice invoice :invoices) {
            if(invoice.getID()==InvoiceID){
                invoiceRow.setID(invoice.invoiceRows.size()+1);
                invoice.invoiceRows.add(invoiceRow);
                invoice.setTotalAmount(invoiceRow.getAmount()+invoice.getTotalAmount());
                invoice.setTotalPrice(invoiceRow.getFirstPrice()*invoiceRow.getAmount()+invoice.getTotalPrice());
            }
        }
         
          boolean flag=false;
        for (Product product :products) {
            if(product.getName().equalsIgnoreCase(Category)){
                product.invoiceRows.add(invoiceRow);
                product.setAmount(product.getAmount()+invoiceRow.getAmount());
            }
        }
        
    }
            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCSV;
    private javax.swing.JButton btnShipItem;
    private javax.swing.JButton btnShow;
    // End of variables declaration//GEN-END:variables
}
